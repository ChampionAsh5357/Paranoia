buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
        maven {url = 'https://dist.creeper.host/Sponge/maven' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'maven'
    id 'signing'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

String semver = version_major + '.' + version_api + '.' + version_minor
version = mc + '-' + semver + '.' + version_patch
group = website
archivesBaseName = modId

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

compileJava {
	sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
}

sourceSets {
	api
	main
    main.resources.srcDirs += 'src/generated/resources'
}

configurations {
	apiCompile.extendsFrom(compile)
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'snapshot', version: mappingsVersion    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            arg '-mixin.config=' + modId + '.mixins.json'

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                paranoia {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg '-mixin.config=' + modId + '.mixins.json'

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                paranoia {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'paranoia', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources')

            mods {
                paranoia {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:' + mc + '-' + forge
    
    implementation sourceSets.api.output
}

jar {
    from sourceSets.main.output.classesDirs
    from sourceSets.main.output.resourcesDir
    from sourceSets.api.output.classesDirs
    from sourceSets.api.output.resourcesDir

    manifest {
        attributes([
            "Specification-Title": "Paranoia",
            "Specification-Vendor": "ChampionAsh5357",
            "Specification-Version": semver,
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"ChampionAsh5357",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "${modId}.mixins.json"
        ])
    }
}

jar.finalizedBy('reobfJar') 

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    classifier = "sources"
    from sourceSets.main.allJava
    from sourceSets.api.allJava
}

task apiJar(type: Jar) {
	classifier = "api"
	from sourceSets.api.output
	from sourceSets.api.allJava
}

artifacts {
    archives javadocJar
    archives sourcesJar
    archives apiJar
}

task("uploadJars", dependsOn: "build") {
    apply plugin: "maven"
    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: "file://${local_maven}")
                pom.project {
                    name="Paranoia"
                    description="Not Everything is What it Seems"
                    licenses {
                        license {
                            name="GNU Lesser General Public License v3.0"
                            url="https://www.gnu.org/licenses/lgpl-3.0.html"
                        }
                    }
                    developers {
                        developer {
                            name="ChampionAsh5357"
                        }
                    }
                }
            }
        }
    }
}

signing {
    sign configurations.archives
}

processResources {
   inputs.property 'version', project.version
   
   from(sourceSets.main.resources.srcDirs) {
       include 'META-INF/mods.toml'
       expand 'version': project.version
   }
   
   from(sourceSets.main.resources.srcDirs) {
       exclude 'META-INF/mods.toml'
   }
}

mixin {
	add sourceSets.main, '${modId}.refmap.json'
}